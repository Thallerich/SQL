DROP INDEX IX_SALEXLOG_Anlage_ ON dbo.SALEXLOG;
GO

EXEC sp_rename N'SALEXLOG', N'__SALEXLOG'
GO
EXEC sp_rename N'PK_SALEXLOG', N'PK___SALEXLOG'
GO

ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_Anlage_Default;
GO
ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_ExternSysDefault;
GO
ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_FunctionNameDefault;
GO
ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_IDDefault;
GO
ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_IsRequestDefault;
GO
ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_ResponseSuccessfulDefault;
GO
ALTER TABLE __SALEXLOG DROP CONSTRAINT SALEXLOG_Update_Default;
GO

DROP TRIGGER AnlageUser_SALEXLOG_INSERT;
GO
DROP TRIGGER LastModified_SALEXLOG_UPDATE;
GO

CREATE TABLE SALEXLOG (
  ID INTEGER NOT NULL,
  FunctionName VARCHAR(40) COLLATE Latin1_General_CS_AS NOT NULL,
  HTTPRequest NVARCHAR(max) COLLATE Latin1_General_CS_AS,
  ResponseSuccessful BIT NOT NULL,
  ResponseReturnDescriptio NVARCHAR(max) COLLATE Latin1_General_CS_AS,
  IsRequest BIT NOT NULL,
  ExternSys INTEGER NOT NULL,
  Anlage_ DATETIME2(3),
  Update_ DATETIME2(3), 
  AnlageUserID_ INTEGER, 
  UserID_ INTEGER
);

GO

CREATE INDEX IX_SALEXLOG_Anlage_ ON dbo.SALEXLOG (Anlage_) WITH (DATA_COMPRESSION = PAGE, ONLINE = ON);

GO

ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_ExternSysDefault DEFAULT 0 FOR ExternSys
GO
ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_FunctionNameDefault DEFAULT '?' FOR FunctionName
GO
ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_ResponseSuccessfulDefault DEFAULT 0 FOR ResponseSuccessful
GO
ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_IDDefault DEFAULT NEXT VALUE FOR NextID_SALEXLOG FOR ID
GO
ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_IsRequestDefault DEFAULT 0 FOR IsRequest
GO
ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_Update_Default DEFAULT GetDate() FOR Update_
GO
ALTER TABLE SALEXLOG WITH NOCHECK ADD CONSTRAINT SALEXLOG_Anlage_Default DEFAULT GetDate() FOR Anlage_
GO
ALTER TABLE SALEXLOG ADD CONSTRAINT PK_SALEXLOG PRIMARY KEY CLUSTERED (ID);
GO

CREATE TRIGGER "LastModified_SALEXLOG_UPDATE" ON SALEXLOG AFTER UPDATE AS SET NOCOUNT ON; 
DECLARE @UserID Int; 
IF (dbo.TriggerUpdateEnabled() = 1) BEGIN 
  IF UPDATE(Update_) BEGIN 
    RAISERROR('<ADV> Updating the field SALEXLOG.Update_ manually is not allowed. TRANSACTION rolled back.', 16, 1); 
    ROLLBACK TRANSACTION
    RETURN
  END
  IF (UPDATE(UserID_)) 
    SET @UserID = (SELECT TOP 1 UserID_ FROM Inserted ORDER BY 1) 
  ELSE  BEGIN 
    IF OBJECT_ID('tempdb..#AdvSession') IS NOT NULL 
      SET @UserID = COALESCE((SELECT TOP 1 MitarbeiID FROM #AdvSession ORDER BY 1), -2) 
    ELSE 
      SET @UserID = -2 
  END 
 
  UPDATE SALEXLOG 
  SET Update_ = GetDate(), 
  UserID_ = @UserID 
  FROM INSERTED 
  WHERE INSERTED.ID = SALEXLOG.ID END ;
GO
--Erstelle Trigger...
GO
CREATE TRIGGER "AnlageUser_SALEXLOG_INSERT" ON SALEXLOG AFTER INSERT AS SET NOCOUNT ON; 
DECLARE @UserID Int; 
IF dbo.TriggerAnlageEnabled() = 1 BEGIN 
  IF OBJECT_ID('tempdb..#AdvSession') IS NOT NULL 
    SET @UserID = COALESCE((SELECT TOP 1 MitarbeiID FROM #AdvSession ORDER BY 1), -2) 
  ELSE 
    SET @UserID = -2 
 
  UPDATE SALEXLOG 
  SET AnlageUserID_ = COALESCE(INSERTED.AnlageUserID_, @UserID), UserID_ = COALESCE(INSERTED.AnlageUserID_, @UserID) 
  FROM INSERTED 
  WHERE INSERTED.ID = SALEXLOG.ID END ;
GO

CREATE INDEX IX__SALEXLOG_Anlage_ ON dbo.__SALEXLOG (Anlage_) WITH (DATA_COMPRESSION = PAGE, ONLINE = ON);
GO

INSERT INTO SALEXLOG WITH (TABLOCK)
SELECT *
FROM __SALEXLOG
WHERE __SALEXLOG.Anlage_ >= N'2025-01-01 00:00:00.000';

GO